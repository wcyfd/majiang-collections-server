// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Playback.proto

package com.randioo.mahjong_public_server.protocol;

public final class Playback {
  private Playback() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class PlaybackCatelogRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use PlaybackCatelogRequest.newBuilder() to construct.
    private PlaybackCatelogRequest() {
      initFields();
    }
    private PlaybackCatelogRequest(boolean noInit) {}
    
    private static final PlaybackCatelogRequest defaultInstance;
    public static PlaybackCatelogRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public PlaybackCatelogRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Playback.internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Playback.internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogRequest_fieldAccessorTable;
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.PlaybackCatelogRequest)
    }
    
    static {
      defaultInstance = new PlaybackCatelogRequest(true);
      com.randioo.mahjong_public_server.protocol.Playback.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.PlaybackCatelogRequest)
  }
  
  public static final class PlaybackCatelogResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use PlaybackCatelogResponse.newBuilder() to construct.
    private PlaybackCatelogResponse() {
      initFields();
    }
    private PlaybackCatelogResponse(boolean noInit) {}
    
    private static final PlaybackCatelogResponse defaultInstance;
    public static PlaybackCatelogResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public PlaybackCatelogResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Playback.internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Playback.internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogResponse_fieldAccessorTable;
    }
    
    // repeated .com.randioo.mahjong_public_server.protocol.PlaybackCatelogRoundData data = 1;
    public static final int DATA_FIELD_NUMBER = 1;
    private java.util.List<com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData> data_ =
      java.util.Collections.emptyList();
    public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData> getDataList() {
      return data_;
    }
    public int getDataCount() { return data_.size(); }
    public com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData getData(int index) {
      return data_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData element : getDataList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData element : getDataList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.data_ != java.util.Collections.EMPTY_LIST) {
          result.data_ =
            java.util.Collections.unmodifiableList(result.data_);
        }
        com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse.getDefaultInstance()) return this;
        if (!other.data_.isEmpty()) {
          if (result.data_.isEmpty()) {
            result.data_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData>();
          }
          result.data_.addAll(other.data_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addData(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .com.randioo.mahjong_public_server.protocol.PlaybackCatelogRoundData data = 1;
      public java.util.List<com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData> getDataList() {
        return java.util.Collections.unmodifiableList(result.data_);
      }
      public int getDataCount() {
        return result.getDataCount();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData getData(int index) {
        return result.getData(index);
      }
      public Builder setData(int index, com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.data_.set(index, value);
        return this;
      }
      public Builder setData(int index, com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData.Builder builderForValue) {
        result.data_.set(index, builderForValue.build());
        return this;
      }
      public Builder addData(com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.data_.isEmpty()) {
          result.data_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData>();
        }
        result.data_.add(value);
        return this;
      }
      public Builder addData(com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData.Builder builderForValue) {
        if (result.data_.isEmpty()) {
          result.data_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData>();
        }
        result.data_.add(builderForValue.build());
        return this;
      }
      public Builder addAllData(
          java.lang.Iterable<? extends com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData> values) {
        if (result.data_.isEmpty()) {
          result.data_ = new java.util.ArrayList<com.randioo.mahjong_public_server.protocol.Entity.PlaybackCatelogRoundData>();
        }
        super.addAll(values, result.data_);
        return this;
      }
      public Builder clearData() {
        result.data_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.PlaybackCatelogResponse)
    }
    
    static {
      defaultInstance = new PlaybackCatelogResponse(true);
      com.randioo.mahjong_public_server.protocol.Playback.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.PlaybackCatelogResponse)
  }
  
  public static final class PlaybackGetBinaryRequest extends
      com.google.protobuf.GeneratedMessage {
    // Use PlaybackGetBinaryRequest.newBuilder() to construct.
    private PlaybackGetBinaryRequest() {
      initFields();
    }
    private PlaybackGetBinaryRequest(boolean noInit) {}
    
    private static final PlaybackGetBinaryRequest defaultInstance;
    public static PlaybackGetBinaryRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public PlaybackGetBinaryRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Playback.internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryRequest_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Playback.internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryRequest_fieldAccessorTable;
    }
    
    // optional int32 playbackId = 1;
    public static final int PLAYBACKID_FIELD_NUMBER = 1;
    private boolean hasPlaybackId;
    private int playbackId_ = 0;
    public boolean hasPlaybackId() { return hasPlaybackId; }
    public int getPlaybackId() { return playbackId_; }
    
    // optional bool needSCStream = 2;
    public static final int NEEDSCSTREAM_FIELD_NUMBER = 2;
    private boolean hasNeedSCStream;
    private boolean needSCStream_ = false;
    public boolean hasNeedSCStream() { return hasNeedSCStream; }
    public boolean getNeedSCStream() { return needSCStream_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasPlaybackId()) {
        output.writeInt32(1, getPlaybackId());
      }
      if (hasNeedSCStream()) {
        output.writeBool(2, getNeedSCStream());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasPlaybackId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getPlaybackId());
      }
      if (hasNeedSCStream()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, getNeedSCStream());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest other) {
        if (other == com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest.getDefaultInstance()) return this;
        if (other.hasPlaybackId()) {
          setPlaybackId(other.getPlaybackId());
        }
        if (other.hasNeedSCStream()) {
          setNeedSCStream(other.getNeedSCStream());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setPlaybackId(input.readInt32());
              break;
            }
            case 16: {
              setNeedSCStream(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // optional int32 playbackId = 1;
      public boolean hasPlaybackId() {
        return result.hasPlaybackId();
      }
      public int getPlaybackId() {
        return result.getPlaybackId();
      }
      public Builder setPlaybackId(int value) {
        result.hasPlaybackId = true;
        result.playbackId_ = value;
        return this;
      }
      public Builder clearPlaybackId() {
        result.hasPlaybackId = false;
        result.playbackId_ = 0;
        return this;
      }
      
      // optional bool needSCStream = 2;
      public boolean hasNeedSCStream() {
        return result.hasNeedSCStream();
      }
      public boolean getNeedSCStream() {
        return result.getNeedSCStream();
      }
      public Builder setNeedSCStream(boolean value) {
        result.hasNeedSCStream = true;
        result.needSCStream_ = value;
        return this;
      }
      public Builder clearNeedSCStream() {
        result.hasNeedSCStream = false;
        result.needSCStream_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.PlaybackGetBinaryRequest)
    }
    
    static {
      defaultInstance = new PlaybackGetBinaryRequest(true);
      com.randioo.mahjong_public_server.protocol.Playback.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.PlaybackGetBinaryRequest)
  }
  
  public static final class PlaybackGetBinaryResponse extends
      com.google.protobuf.GeneratedMessage {
    // Use PlaybackGetBinaryResponse.newBuilder() to construct.
    private PlaybackGetBinaryResponse() {
      initFields();
    }
    private PlaybackGetBinaryResponse(boolean noInit) {}
    
    private static final PlaybackGetBinaryResponse defaultInstance;
    public static PlaybackGetBinaryResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public PlaybackGetBinaryResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.randioo.mahjong_public_server.protocol.Playback.internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryResponse_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.randioo.mahjong_public_server.protocol.Playback.internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryResponse_fieldAccessorTable;
    }
    
    // optional int32 errorCode = 1 [default = 1];
    public static final int ERRORCODE_FIELD_NUMBER = 1;
    private boolean hasErrorCode;
    private int errorCode_ = 1;
    public boolean hasErrorCode() { return hasErrorCode; }
    public int getErrorCode() { return errorCode_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.RoundVideoData RoundVideoData = 2;
    public static final int ROUNDVIDEODATA_FIELD_NUMBER = 2;
    private boolean hasRoundVideoData;
    private com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData roundVideoData_;
    public boolean hasRoundVideoData() { return hasRoundVideoData; }
    public com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData getRoundVideoData() { return roundVideoData_; }
    
    // optional .com.randioo.mahjong_public_server.protocol.GameConfigData gameConfigData = 3;
    public static final int GAMECONFIGDATA_FIELD_NUMBER = 3;
    private boolean hasGameConfigData;
    private com.randioo.mahjong_public_server.protocol.Entity.GameConfigData gameConfigData_;
    public boolean hasGameConfigData() { return hasGameConfigData; }
    public com.randioo.mahjong_public_server.protocol.Entity.GameConfigData getGameConfigData() { return gameConfigData_; }
    
    // optional string roomId = 4;
    public static final int ROOMID_FIELD_NUMBER = 4;
    private boolean hasRoomId;
    private java.lang.String roomId_ = "";
    public boolean hasRoomId() { return hasRoomId; }
    public java.lang.String getRoomId() { return roomId_; }
    
    // repeated int32 allCards = 5;
    public static final int ALLCARDS_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> allCards_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getAllCardsList() {
      return allCards_;
    }
    public int getAllCardsCount() { return allCards_.size(); }
    public int getAllCards(int index) {
      return allCards_.get(index);
    }
    
    // repeated int32 allFlowers = 6;
    public static final int ALLFLOWERS_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> allFlowers_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getAllFlowersList() {
      return allFlowers_;
    }
    public int getAllFlowersCount() { return allFlowers_.size(); }
    public int getAllFlowers(int index) {
      return allFlowers_.get(index);
    }
    
    // optional int32 viewSeat = 7;
    public static final int VIEWSEAT_FIELD_NUMBER = 7;
    private boolean hasViewSeat;
    private int viewSeat_ = 0;
    public boolean hasViewSeat() { return hasViewSeat; }
    public int getViewSeat() { return viewSeat_; }
    
    // optional string roundStartTime = 8;
    public static final int ROUNDSTARTTIME_FIELD_NUMBER = 8;
    private boolean hasRoundStartTime;
    private java.lang.String roundStartTime_ = "";
    public boolean hasRoundStartTime() { return hasRoundStartTime; }
    public java.lang.String getRoundStartTime() { return roundStartTime_; }
    
    private void initFields() {
      roundVideoData_ = com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.getDefaultInstance();
      gameConfigData_ = com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasErrorCode()) {
        output.writeInt32(1, getErrorCode());
      }
      if (hasRoundVideoData()) {
        output.writeMessage(2, getRoundVideoData());
      }
      if (hasGameConfigData()) {
        output.writeMessage(3, getGameConfigData());
      }
      if (hasRoomId()) {
        output.writeString(4, getRoomId());
      }
      for (int element : getAllCardsList()) {
        output.writeInt32(5, element);
      }
      for (int element : getAllFlowersList()) {
        output.writeInt32(6, element);
      }
      if (hasViewSeat()) {
        output.writeInt32(7, getViewSeat());
      }
      if (hasRoundStartTime()) {
        output.writeString(8, getRoundStartTime());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasErrorCode()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getErrorCode());
      }
      if (hasRoundVideoData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getRoundVideoData());
      }
      if (hasGameConfigData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getGameConfigData());
      }
      if (hasRoomId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getRoomId());
      }
      {
        int dataSize = 0;
        for (int element : getAllCardsList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getAllCardsList().size();
      }
      {
        int dataSize = 0;
        for (int element : getAllFlowersList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getAllFlowersList().size();
      }
      if (hasViewSeat()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getViewSeat());
      }
      if (hasRoundStartTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(8, getRoundStartTime());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse result;
      
      // Construct using com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse();
        return builder;
      }
      
      protected com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse.getDescriptor();
      }
      
      public com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse getDefaultInstanceForType() {
        return com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.allCards_ != java.util.Collections.EMPTY_LIST) {
          result.allCards_ =
            java.util.Collections.unmodifiableList(result.allCards_);
        }
        if (result.allFlowers_ != java.util.Collections.EMPTY_LIST) {
          result.allFlowers_ =
            java.util.Collections.unmodifiableList(result.allFlowers_);
        }
        com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse) {
          return mergeFrom((com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse other) {
        if (other == com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse.getDefaultInstance()) return this;
        if (other.hasErrorCode()) {
          setErrorCode(other.getErrorCode());
        }
        if (other.hasRoundVideoData()) {
          mergeRoundVideoData(other.getRoundVideoData());
        }
        if (other.hasGameConfigData()) {
          mergeGameConfigData(other.getGameConfigData());
        }
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (!other.allCards_.isEmpty()) {
          if (result.allCards_.isEmpty()) {
            result.allCards_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.allCards_.addAll(other.allCards_);
        }
        if (!other.allFlowers_.isEmpty()) {
          if (result.allFlowers_.isEmpty()) {
            result.allFlowers_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.allFlowers_.addAll(other.allFlowers_);
        }
        if (other.hasViewSeat()) {
          setViewSeat(other.getViewSeat());
        }
        if (other.hasRoundStartTime()) {
          setRoundStartTime(other.getRoundStartTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 8: {
              setErrorCode(input.readInt32());
              break;
            }
            case 18: {
              com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.newBuilder();
              if (hasRoundVideoData()) {
                subBuilder.mergeFrom(getRoundVideoData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setRoundVideoData(subBuilder.buildPartial());
              break;
            }
            case 26: {
              com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.Builder subBuilder = com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.newBuilder();
              if (hasGameConfigData()) {
                subBuilder.mergeFrom(getGameConfigData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setGameConfigData(subBuilder.buildPartial());
              break;
            }
            case 34: {
              setRoomId(input.readString());
              break;
            }
            case 40: {
              addAllCards(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addAllCards(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              addAllFlowers(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addAllFlowers(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              setViewSeat(input.readInt32());
              break;
            }
            case 66: {
              setRoundStartTime(input.readString());
              break;
            }
          }
        }
      }
      
      
      // optional int32 errorCode = 1 [default = 1];
      public boolean hasErrorCode() {
        return result.hasErrorCode();
      }
      public int getErrorCode() {
        return result.getErrorCode();
      }
      public Builder setErrorCode(int value) {
        result.hasErrorCode = true;
        result.errorCode_ = value;
        return this;
      }
      public Builder clearErrorCode() {
        result.hasErrorCode = false;
        result.errorCode_ = 1;
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.RoundVideoData RoundVideoData = 2;
      public boolean hasRoundVideoData() {
        return result.hasRoundVideoData();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData getRoundVideoData() {
        return result.getRoundVideoData();
      }
      public Builder setRoundVideoData(com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasRoundVideoData = true;
        result.roundVideoData_ = value;
        return this;
      }
      public Builder setRoundVideoData(com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.Builder builderForValue) {
        result.hasRoundVideoData = true;
        result.roundVideoData_ = builderForValue.build();
        return this;
      }
      public Builder mergeRoundVideoData(com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData value) {
        if (result.hasRoundVideoData() &&
            result.roundVideoData_ != com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.getDefaultInstance()) {
          result.roundVideoData_ =
            com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.newBuilder(result.roundVideoData_).mergeFrom(value).buildPartial();
        } else {
          result.roundVideoData_ = value;
        }
        result.hasRoundVideoData = true;
        return this;
      }
      public Builder clearRoundVideoData() {
        result.hasRoundVideoData = false;
        result.roundVideoData_ = com.randioo.mahjong_public_server.protocol.Entity.RoundVideoData.getDefaultInstance();
        return this;
      }
      
      // optional .com.randioo.mahjong_public_server.protocol.GameConfigData gameConfigData = 3;
      public boolean hasGameConfigData() {
        return result.hasGameConfigData();
      }
      public com.randioo.mahjong_public_server.protocol.Entity.GameConfigData getGameConfigData() {
        return result.getGameConfigData();
      }
      public Builder setGameConfigData(com.randioo.mahjong_public_server.protocol.Entity.GameConfigData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasGameConfigData = true;
        result.gameConfigData_ = value;
        return this;
      }
      public Builder setGameConfigData(com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.Builder builderForValue) {
        result.hasGameConfigData = true;
        result.gameConfigData_ = builderForValue.build();
        return this;
      }
      public Builder mergeGameConfigData(com.randioo.mahjong_public_server.protocol.Entity.GameConfigData value) {
        if (result.hasGameConfigData() &&
            result.gameConfigData_ != com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.getDefaultInstance()) {
          result.gameConfigData_ =
            com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.newBuilder(result.gameConfigData_).mergeFrom(value).buildPartial();
        } else {
          result.gameConfigData_ = value;
        }
        result.hasGameConfigData = true;
        return this;
      }
      public Builder clearGameConfigData() {
        result.hasGameConfigData = false;
        result.gameConfigData_ = com.randioo.mahjong_public_server.protocol.Entity.GameConfigData.getDefaultInstance();
        return this;
      }
      
      // optional string roomId = 4;
      public boolean hasRoomId() {
        return result.hasRoomId();
      }
      public java.lang.String getRoomId() {
        return result.getRoomId();
      }
      public Builder setRoomId(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasRoomId = true;
        result.roomId_ = value;
        return this;
      }
      public Builder clearRoomId() {
        result.hasRoomId = false;
        result.roomId_ = getDefaultInstance().getRoomId();
        return this;
      }
      
      // repeated int32 allCards = 5;
      public java.util.List<java.lang.Integer> getAllCardsList() {
        return java.util.Collections.unmodifiableList(result.allCards_);
      }
      public int getAllCardsCount() {
        return result.getAllCardsCount();
      }
      public int getAllCards(int index) {
        return result.getAllCards(index);
      }
      public Builder setAllCards(int index, int value) {
        result.allCards_.set(index, value);
        return this;
      }
      public Builder addAllCards(int value) {
        if (result.allCards_.isEmpty()) {
          result.allCards_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.allCards_.add(value);
        return this;
      }
      public Builder addAllAllCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.allCards_.isEmpty()) {
          result.allCards_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.allCards_);
        return this;
      }
      public Builder clearAllCards() {
        result.allCards_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated int32 allFlowers = 6;
      public java.util.List<java.lang.Integer> getAllFlowersList() {
        return java.util.Collections.unmodifiableList(result.allFlowers_);
      }
      public int getAllFlowersCount() {
        return result.getAllFlowersCount();
      }
      public int getAllFlowers(int index) {
        return result.getAllFlowers(index);
      }
      public Builder setAllFlowers(int index, int value) {
        result.allFlowers_.set(index, value);
        return this;
      }
      public Builder addAllFlowers(int value) {
        if (result.allFlowers_.isEmpty()) {
          result.allFlowers_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.allFlowers_.add(value);
        return this;
      }
      public Builder addAllAllFlowers(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.allFlowers_.isEmpty()) {
          result.allFlowers_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.allFlowers_);
        return this;
      }
      public Builder clearAllFlowers() {
        result.allFlowers_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional int32 viewSeat = 7;
      public boolean hasViewSeat() {
        return result.hasViewSeat();
      }
      public int getViewSeat() {
        return result.getViewSeat();
      }
      public Builder setViewSeat(int value) {
        result.hasViewSeat = true;
        result.viewSeat_ = value;
        return this;
      }
      public Builder clearViewSeat() {
        result.hasViewSeat = false;
        result.viewSeat_ = 0;
        return this;
      }
      
      // optional string roundStartTime = 8;
      public boolean hasRoundStartTime() {
        return result.hasRoundStartTime();
      }
      public java.lang.String getRoundStartTime() {
        return result.getRoundStartTime();
      }
      public Builder setRoundStartTime(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasRoundStartTime = true;
        result.roundStartTime_ = value;
        return this;
      }
      public Builder clearRoundStartTime() {
        result.hasRoundStartTime = false;
        result.roundStartTime_ = getDefaultInstance().getRoundStartTime();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.randioo.mahjong_public_server.protocol.PlaybackGetBinaryResponse)
    }
    
    static {
      defaultInstance = new PlaybackGetBinaryResponse(true);
      com.randioo.mahjong_public_server.protocol.Playback.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.randioo.mahjong_public_server.protocol.PlaybackGetBinaryResponse)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryResponse_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016Playback.proto\022*com.randioo.mahjong_pu" +
      "blic_server.protocol\032\014Entity.proto\"\030\n\026Pl" +
      "aybackCatelogRequest\"m\n\027PlaybackCatelogR" +
      "esponse\022R\n\004data\030\001 \003(\0132D.com.randioo.mahj" +
      "ong_public_server.protocol.PlaybackCatel" +
      "ogRoundData\"D\n\030PlaybackGetBinaryRequest\022" +
      "\022\n\nplaybackId\030\001 \001(\005\022\024\n\014needSCStream\030\002 \001(" +
      "\010\"\271\002\n\031PlaybackGetBinaryResponse\022\024\n\terror" +
      "Code\030\001 \001(\005:\0011\022R\n\016RoundVideoData\030\002 \001(\0132:." +
      "com.randioo.mahjong_public_server.protoc",
      "ol.RoundVideoData\022R\n\016gameConfigData\030\003 \001(" +
      "\0132:.com.randioo.mahjong_public_server.pr" +
      "otocol.GameConfigData\022\016\n\006roomId\030\004 \001(\t\022\020\n" +
      "\010allCards\030\005 \003(\005\022\022\n\nallFlowers\030\006 \003(\005\022\020\n\010v" +
      "iewSeat\030\007 \001(\005\022\026\n\016roundStartTime\030\010 \001(\t"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogRequest_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogRequest_descriptor,
              new java.lang.String[] { },
              com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest.class,
              com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogResponse_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_PlaybackCatelogResponse_descriptor,
              new java.lang.String[] { "Data", },
              com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse.class,
              com.randioo.mahjong_public_server.protocol.Playback.PlaybackCatelogResponse.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryRequest_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryRequest_descriptor,
              new java.lang.String[] { "PlaybackId", "NeedSCStream", },
              com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest.class,
              com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryRequest.Builder.class);
          internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryResponse_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_com_randioo_mahjong_public_server_protocol_PlaybackGetBinaryResponse_descriptor,
              new java.lang.String[] { "ErrorCode", "RoundVideoData", "GameConfigData", "RoomId", "AllCards", "AllFlowers", "ViewSeat", "RoundStartTime", },
              com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse.class,
              com.randioo.mahjong_public_server.protocol.Playback.PlaybackGetBinaryResponse.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.randioo.mahjong_public_server.protocol.Entity.getDescriptor(),
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
